/*
    Now we'll add the CSS to transform our
    mess of images into an orderly grid gallery.

    We'll start off with our usual page layout setup:
*/

* {
    box-sizing: border-box
}

body {
    margin: 0px;
    font-family: sans-serif;
}

/*
    Then we'll set up Centered Single Column Page Layout,
    and also center the inline content inside via text-align
*/
#layout {
    max-width: 800px;
    margin: 48px auto;
    text-align: center;
}

/*
    Now we'll set up the gallery itself.  Basically, all
    we're doing is setting up a 3-column grid with a
    border (optional, of course), as well as fitting 
    the images to the width of the grid columns.
*/

.basic-grid-gallery {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;

    /*
        optional extra properties,
        customize as necessary
    */
    padding: 24px;
    border: 10px solid #333333;
}

.basic-grid-gallery img {
    width: 100%;
}

.cropped-grid-gallery {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-auto-rows: 200px;
    padding: 24px;
    border: 10px solid #333333;
}

.cropped-grid-gallery img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/*
    Next, we're going to see what flexbox
    can do for our Galleries.

    In particular, we're going to show a 
    couple ways how you could build a 
    masonry gallery with flexbox.

    Go back into the HTML and duplicate 
    the previous mixed image gallery,
    but give it a different class called
    "horizontal-masonry-gallery"

    (Go back to HTML and do that)

    After adding that in the HTML, we'll
    start configuring our flexbox gallery
    for horizontal masonry.

    For the container, that's actually
    very simple: just activate flexbox
    and enable wrapping.
*/
.horizontal-masonry-gallery {
    display: flex;
    flex-wrap: wrap;
    /*
        We said before that the gap property
        works for both grid and flexbox. It
        looked pretty nice for our grid
        galleries, so let's preemptively 
        add it in here as well.
    */
    gap: 24px;
}

/*
    Now we need to address the images.
    First, since this is a horizontal
    masonry gallery, we want to restrict
    the height, so that the widths are free
    to grow and expand as much as they can.

*/
.horizontal-masonry-gallery img {
    height: 250px;
    /*
        You can see that by doing that,
        our gallery is already a bit more 
        orderly looking, but there are
        jagged edges on the right side.

        To fix that, let's allow the images
        to flex to fill the available space.
    */
    flex: 1;
    /*
        That's better, but now some of our 
        images are distorted.  So let's rely on 
        object-fit once again, to force the
        images to crop rather than stretch/squish.
    */
    object-fit: cover;
}

/*
    And now we have a pretty nice looking
    horizontal masonry gallery!

    Masonry galleries tend to be more 
    eye-catching because their layouts are
    more dynamic rather than static.

    However, with this implementation, our
    images inside get cropped, so there are
    certain tradeoffs.
*/

/*
    Now we'll see how to build a vertical
    masonry gallery.  There is a way to
    do it with Flexbox, but it's a rather
    fragile design, meaning it's easy to
    break if you add or remove images.

    That example is in the Layouts section
    of the Coding Cookbook, if you want to
    see how it's done, but we're going to
    show you a better (and simpler!) way
    to build a vertical masonry gallery,
    using a somewhat archaic CSS Property.

    First, we need to create another gallery
    in our HTML, this time with the class
    of "vertical-masonry-gallery".

    (Go into the HTML and do that)

    Now we're going to target the gallery,
    and use a property called "columns".

    This property accepts two values: 
    - the number of columns to define
    - the width of those columns

    Let's build a three column gallery,
    with the widths of those columns
    able to adjust AUTOmatically to
    fill the available space.

    (This is similar to the flex property
    in flexboxes, or the fractional units
    (fr) in grids)
*/

.vertical-masonry-gallery {
    columns: 3 auto;
}

/*
    However, as before, we still need to
    configure the images to get them to
    behave in the gallery.

    This is the same as most of our 
    previous examples.
*/
.vertical-masonry-gallery img {
    width: 100%;
}

/*
    Not bad for only using two CSS properties!

    The columns property has been around for a 
    very long time, and originally was 
    used to build text columns similar 
    to a newspaper layout.

    As we've discussed before though,
    newspaper columns are not a very 
    good design for textual content online;
    they tend to be frustrating to read
    if you have to keep scrolling up and
    down the page to read them.

    However...images are a different matter:
    images don't need to be viewed sequentially
    in order to understand them, even in columns.

    So the columns of images in our gallery
    actually work really well as a design,
    and the best part of using the columns
    property for our gallery is that it will
    automatically re-adjust as necessary 
    when we add or subtract images from the 
    gallery.
*/

/*
    The only real downside to using the 
    columns property to set up a vertical
    masonry gallery is that it's a little
    more complex to add spacing between
    images.

    We basically need to do it in two steps: 
    one at the container level, and one at 
    the item level.

    On the container level, we need to add
    another property called column-gap
    (similar to the gap property, but only
    usable with the columns property)
*/

.vertical-masonry-gallery {
    columns: 3 auto;
    column-gap: 24px; /* new */
}

/*
    The column-gap property does what you
    can probably guess: adds space between
    columns.

    But what about the vertical space between
    images? That we need to address by adding
    margin to each individual item (or image,
    in this case)
*/

.vertical-masonry-gallery img {
    width: 100%;
    margin-bottom: 24px;
}

/*
    So, not too difficult to adjust the spacing,
    but a bit more compared to just using the
    gap property with flexboxes and grids.

    The other downside (which is true of vertical
    masonry layouts as a whole) is that you'll
    have a jagged edge of images at the bottom
    of the gallery.

    The columns property actually does a decent
    job of balancing the heights of the columns,
    but there's only so much it can do when you
    have radically different images sizes.

    So keep that in mind if you're considering
    using vertical masonry layouts.

    That's it for our Galleries demo!  Now you
    have a few more Content Layouts in your 
    tool kit that you can use going forward!
*/
